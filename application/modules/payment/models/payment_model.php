<?php ob_start(); ?><?php if ( ! defined('BASEPATH')) exit('No direct script access allowed'); ?><?phpclass Payment_model extends CI_Model {    function  __construct() {        parent::__construct();        $this->load->helper('form');        $this->load->library('showuser');        $this->load->library('generated_tanggal');    }        function getPayment($limit,$offset)    {        $idroles = $this->session->userdata('statususer');        $iduser = $this->session->userdata('idusers');        $this->db->join("schedules","registrations.idschedules = schedules.idschedules");        $this->db->join("branches","schedules.idbranches = branches.idbranches");        $this->db->join("exams","schedules.idexams = exams.idexams");        $this->db->join("users","registrations.idusers = users.idusers");                if($idroles == 3) {        $this->db->where('schedules.schclosingreg > ', date("Y-m-d H:i:s"));        $this->db->where('registrations.idusers',$iduser);        }        if($idroles == 2) {        $this->db->where('registrations.registrationspayment','unpaid');        $this->db->where('registrations.createdbys',$iduser);        }        if($idroles == 1) {        $this->db->where('registrations.registrationspayment','unpaid');        $this->db->where('registrations.createdbys',$iduser);        }                $this->db->limit($limit, $offset);        $this->db->order_by('idregistrations', 'DESC');        $q =  $this->db->get("registrations");        return $q->result();    }        public function count_payment() {            $idroles = $this->session->userdata('statususer');            $iduser = $this->session->userdata('idusers');            $this->db->join("schedules","registrations.idschedules = schedules.idschedules");            $this->db->where('registrations.registrationspayment','unpaid');            if($idroles == 3) {            $this->db->where('schedules.schclosingreg > ', date("Y-m-d H:i:s"));            $this->db->where('registrations.idusers',$iduser);            }            if($idroles == 2) {            $this->db->where('registrations.registrationspayment','unpaid');            $this->db->where('registrations.createdbys',$iduser);            }            if($idroles == 1) {            $this->db->where('registrations.registrationspayment','unpaid');            $this->db->where('registrations.createdbys',$iduser);            }            $query = $this->db->get("registrations");             return $query->num_rows();     }    public function getTestschedule() {      $partner = $this->uri->segment(3);      $query = $this->db->query('select * from branches where idpartners="'.$partner.'"');      foreach ($query->result() as $row ) { ?>                 <option value="<?php echo $row->idbranches ?>"><?php echo $row->branchname ?></option>     <?php  }    }    public function addschedule() {        $partner = $this->input->post('selectpartner');        $test = $this->input->post('testvenue');        $module = $this->input->post('module');        $date = $this->input->post('date_of_birth');        $closingreg = $this->input->post('closingreg');        $dollar = $this->input->post('dollar');        $gbp = $this->input->post('gbp');        $rupiah = $this->input->post('rupiah');        $maximumuser = $this->input->post('maximumuser');        $isactive = $this->input->post('isactive');        $data = array(            'idbranches' => $test,            'idexams' => $module,            'schdate' => $date,            'schclosingreg' => $closingreg,            'dollar' => $dollar,            'gbp' => $gbp,            'rupiah' => $rupiah,            'maxuser' => $maximumuser,            'schstatus' => $isactive,            'created' => date("Y-m-d H:i:s"),            'createdby' => $this->session->userdata('idusers'),            );        $query = $this->db->insert('schedules',$data);        if($query) {          $status = array('status'=> 'sukses');          echo json_encode($status);        } else {          $status = array('status'=> 'gagal');          echo json_encode($status);        }    }    public function updateschedule() {        $idschedules = $this->input->post('idschedules');        $partner = $this->input->post('selectpartners');        $test = $this->input->post('testvenues');        $module = $this->input->post('modules');        $date = $this->input->post('date_of_birth');        $closingreg = $this->input->post('closingreg');        $dollar = $this->input->post('dollar');        $gbp = $this->input->post('gbp');        $rupiah = $this->input->post('rupiah');        $maximumuser = $this->input->post('maximumuser');        $isactive = $this->input->post('isactive');        $data = array(            'idbranches' => $test,            'idexams' => $module,            'schdate' => $date,            'schclosingreg' => $closingreg,            'dollar' => $dollar,            'gbp' => $gbp,            'rupiah' => $rupiah,            'maxuser' => $maximumuser,            'schstatus' => $isactive,            'created' => date("Y-m-d H:i:s"),            'createdby' => $this->session->userdata('idusers'),            );        $this->db->where('idschedules',$idschedules);            $query = $this->db->update('schedules',$data);        if($query) {          $status = array('statuss'=> 'sukses','idschedules' => $idschedules);          echo '{"result":'.json_encode($status).'}';        } else {          $status = array('status'=> 'gagal');          echo json_encode($status);        }    }    function getnewschedule() {        $this->db->where('schdate >', date("Y-m-d H:i:s"));        $this->db->join("branches","schedules.idbranches = branches.idbranches");        $this->db->join("exams","schedules.idexams = exams.idexams");        $this->db->limit(1);        $this->db->order_by('idschedules', 'DESC');        $q =  $this->db->get("schedules");        return $q->result();    }    function getupdatepayment() {        $idregistrations = $this->uri->segment(3);        $this->db->join("schedules","registrations.idschedules = schedules.idschedules");        $this->db->join("branches","schedules.idbranches = branches.idbranches");        $this->db->join("exams","schedules.idexams = exams.idexams");        $this->db->join("users","registrations.idusers = users.idusers");        $this->db->where('registrations.idregistrations ', $idregistrations);        $q =  $this->db->get("registrations");        return $q->result();    }    function geteditpayment($idpayment) {        $this->db->join("schedules","registrations.idschedules = schedules.idschedules");        $this->db->join("branches","schedules.idbranches = branches.idbranches");        $this->db->join("partners","branches.idpartners = partners.idpartners");        $this->db->join("exams","schedules.idexams = exams.idexams");        $this->db->join("users","registrations.idusers = users.idusers");        $this->db->where('registrations.idregistrations',$idpayment);        $q =  $this->db->get("registrations");        return $q->result();    }    function getpartnername($table,$id) {            $this->db->where('idpartners',$id);            $q = $this->db->get($table);            foreach ($q->result() as $row ) {                $name = $row->partnername;                return $name;            }    }    public function filterbyvenue($venue,$limit,$offset) {        $idroles = $this->session->userdata('statususer');        $iduser = $this->session->userdata('idusers');        $this->db->join("schedules","registrations.idschedules = schedules.idschedules");        $this->db->join("branches","schedules.idbranches = branches.idbranches");        $this->db->join("exams","schedules.idexams = exams.idexams");        $this->db->join("users","registrations.idusers = users.idusers");        $this->db->where('registrations.registrationspayment','unpaid');         $this->db->where('schedules.idbranches',$venue);        if($idroles != 1) {        $this->db->where('registrations.createdbys',$iduser);        }                $this->db->limit($limit, $offset);        $this->db->order_by('idregistrations', 'DESC');        $q =  $this->db->get("registrations");        return $q->result();        }    public function count_paymentvenue($venue) {            $idroles = $this->session->userdata('statususer');            $iduser = $this->session->userdata('idusers');            $this->db->join("schedules","registrations.idschedules = schedules.idschedules");            $this->db->join("branches","schedules.idbranches = branches.idbranches");            $this->db->join("exams","schedules.idexams = exams.idexams");            $this->db->join("users","registrations.idusers = users.idusers");            $this->db->where('registrations.registrationspayment','unpaid');            $this->db->where('schedules.idbranches',$venue);                if($idroles != 1) {                $this->db->where('registrations.createdbys',$iduser);                }            $query = $this->db->get("registrations");             return $query->num_rows();     }    public function filterbydate($venue,$limit,$offset) {        $idroles = $this->session->userdata('statususer');        $iduser = $this->session->userdata('idusers');        $this->db->join("schedules","registrations.idschedules = schedules.idschedules");        $this->db->join("branches","schedules.idbranches = branches.idbranches");        $this->db->join("exams","schedules.idexams = exams.idexams");        $this->db->join("users","registrations.idusers = users.idusers");        $this->db->where('registrations.registrationspayment','unpaid');         $this->db->where('schedules.schdate',$venue);        if($idroles != 1) {        $this->db->where('registrations.createdbys',$iduser);        }                $this->db->limit($limit, $offset);        $this->db->order_by('idregistrations', 'DESC');        $q =  $this->db->get("registrations");        return $q->result();        }    public function count_paymentdate($venue) {            $idroles = $this->session->userdata('statususer');            $iduser = $this->session->userdata('idusers');            $this->db->join("schedules","registrations.idschedules = schedules.idschedules");            $this->db->join("branches","schedules.idbranches = branches.idbranches");            $this->db->join("exams","schedules.idexams = exams.idexams");            $this->db->join("users","registrations.idusers = users.idusers");            $this->db->where('registrations.registrationspayment','unpaid');             $this->db->where('schedules.schdate',$venue);                if($idroles != 1) {                $this->db->where('registrations.createdbys',$iduser);                }            $query = $this->db->get("registrations");             return $query->num_rows();     }    public function confirmpayment() {          $idreg = $this->input->post('idreg');          $proof = $this->input->post('proof');          $data = array (              'paymentreceipt' => $proof,            );          $this->db->where('idregistrations', $idreg);          $q = $this->db->update('registrations', $data);    }    public function paid() {        $idreg = $this->uri->segment(3);        $data = array (                'registrationspayment' => 'PAID',                'status' => '1',            );        $this->db->where('idregistrations', $idreg);        $q = $this->db->update('registrations', $data);    }}?>