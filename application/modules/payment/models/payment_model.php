<?php ob_start(); ?><?php if ( ! defined('BASEPATH')) exit('No direct script access allowed'); ?><?phpclass Payment_model extends CI_Model {    function  __construct() {        parent::__construct();        date_default_timezone_set('Asia/Jakarta');        $this->load->helper('form');        $this->load->library('showuser');        $this->load->library('generated_tanggal');    }        function getPayment($limit,$offset)    {        $idroles = $this->session->userdata('statususer');        $iduser = $this->session->userdata('idusers');        $this->db->join("schedules","registrations.idschedules = schedules.idschedules");        $this->db->join("branches","schedules.idbranches = branches.idbranches");        $this->db->join("exams","schedules.idexams = exams.idexams");        $this->db->join("users","registrations.idusers = users.idusers");                if($idroles == 3) {        $this->db->where('schedules.schclosingreg > ', date("Y-m-d H:i:s"));        $this->db->where('registrations.idusers',$iduser);        }        if($idroles == 2) {        $this->db->where('registrations.registrationspayment','unpaid');        $this->db->where('registrations.createdbys',$iduser);        }        if($idroles == 1) {        $this->db->where('registrations.registrationspayment','unpaid');        }                $this->db->limit($limit, $offset);        $this->db->order_by('idregistrations', 'DESC');        $q =  $this->db->get("registrations");        return $q->result();    }        public function count_payment() {            $idroles = $this->session->userdata('statususer');            $iduser = $this->session->userdata('idusers');            $this->db->join("schedules","registrations.idschedules = schedules.idschedules");            $this->db->where('registrations.registrationspayment','unpaid');            if($idroles == 3) {            $this->db->where('schedules.schclosingreg > ', date("Y-m-d H:i:s"));            $this->db->where('registrations.idusers',$iduser);            }            if($idroles == 2) {            $this->db->where('registrations.registrationspayment','unpaid');            $this->db->where('registrations.createdbys',$iduser);            }            if($idroles == 1) {            $this->db->where('registrations.registrationspayment','unpaid');            }            $query = $this->db->get("registrations");             return $query->num_rows();     }    public function getTestschedule() {      $partner = $this->uri->segment(3);      $query = $this->db->query('select * from branches where idpartners="'.$partner.'"');      foreach ($query->result() as $row ) { ?>                 <option value="<?php echo $row->idbranches ?>"><?php echo $row->branchname ?></option>     <?php  }    }    public function addschedule() {        $partner = $this->input->post('selectpartner');        $test = $this->input->post('testvenue');        $module = $this->input->post('module');        $date = $this->input->post('date_of_birth');        $closingreg = $this->input->post('closingreg');        $dollar = $this->input->post('dollar');        $gbp = $this->input->post('gbp');        $rupiah = $this->input->post('rupiah');        $maximumuser = $this->input->post('maximumuser');        $isactive = $this->input->post('isactive');        $data = array(            'idbranches' => $test,            'idexams' => $module,            'schdate' => $date,            'schclosingreg' => $closingreg,            'dollar' => $dollar,            'gbp' => $gbp,            'rupiah' => $rupiah,            'maxuser' => $maximumuser,            'schstatus' => $isactive,            'created' => date("Y-m-d H:i:s"),            'createdby' => $this->session->userdata('idusers'),            );        $query = $this->db->insert('schedules',$data);        if($query) {          $status = array('status'=> 'sukses');          echo json_encode($status);        } else {          $status = array('status'=> 'gagal');          echo json_encode($status);        }    }    public function updateschedule() {        $idschedules = $this->input->post('idschedules');        $partner = $this->input->post('selectpartners');        $test = $this->input->post('testvenues');        $module = $this->input->post('modules');        $date = $this->input->post('date_of_birth');        $closingreg = $this->input->post('closingreg');        $dollar = $this->input->post('dollar');        $gbp = $this->input->post('gbp');        $rupiah = $this->input->post('rupiah');        $maximumuser = $this->input->post('maximumuser');        $isactive = $this->input->post('isactive');        $data = array(            'idbranches' => $test,            'idexams' => $module,            'schdate' => $date,            'schclosingreg' => $closingreg,            'dollar' => $dollar,            'gbp' => $gbp,            'rupiah' => $rupiah,            'maxuser' => $maximumuser,            'schstatus' => $isactive,            'created' => date("Y-m-d H:i:s"),            'createdby' => $this->session->userdata('idusers'),            );        $this->db->where('idschedules',$idschedules);            $query = $this->db->update('schedules',$data);        if($query) {          $status = array('statuss'=> 'sukses','idschedules' => $idschedules);          echo '{"result":'.json_encode($status).'}';        } else {          $status = array('status'=> 'gagal');          echo json_encode($status);        }    }    function getnewschedule() {        $this->db->where('schdate >', date("Y-m-d H:i:s"));        $this->db->join("branches","schedules.idbranches = branches.idbranches");        $this->db->join("exams","schedules.idexams = exams.idexams");        $this->db->limit(1);        $this->db->order_by('idschedules', 'DESC');        $q =  $this->db->get("schedules");        return $q->result();    }    function getupdatepayment() {        $idregistrations = $this->uri->segment(3);        $this->db->join("schedules","registrations.idschedules = schedules.idschedules");        $this->db->join("branches","schedules.idbranches = branches.idbranches");        $this->db->join("exams","schedules.idexams = exams.idexams");        $this->db->join("users","registrations.idusers = users.idusers");        $this->db->where('registrations.idregistrations ', $idregistrations);        $q =  $this->db->get("registrations");        return $q->result();    }    function geteditpayment($idpayment) {        $this->db->join("schedules","registrations.idschedules = schedules.idschedules");        $this->db->join("branches","schedules.idbranches = branches.idbranches");        $this->db->join("partners","branches.idpartners = partners.idpartners");        $this->db->join("exams","schedules.idexams = exams.idexams");        $this->db->join("users","registrations.idusers = users.idusers");        $this->db->where('registrations.idregistrations',$idpayment);        $q =  $this->db->get("registrations");        return $q->result();    }    function getpartnername($table,$id) {            $this->db->where('idpartners',$id);            $q = $this->db->get($table);            foreach ($q->result() as $row ) {                $name = $row->partnername;                return $name;            }    }    public function filterbyvenue($venue,$limit,$offset) {        $idroles = $this->session->userdata('statususer');        $iduser = $this->session->userdata('idusers');        $this->db->join("schedules","registrations.idschedules = schedules.idschedules");        $this->db->join("branches","schedules.idbranches = branches.idbranches");        $this->db->join("exams","schedules.idexams = exams.idexams");        $this->db->join("users","registrations.idusers = users.idusers");        $this->db->where('registrations.registrationspayment','unpaid');         $this->db->where('schedules.idbranches',$venue);        if($idroles != 1) {        $this->db->where('registrations.createdbys',$iduser);        }                $this->db->limit($limit, $offset);        $this->db->order_by('idregistrations', 'DESC');        $q =  $this->db->get("registrations");        return $q->result();        }    public function count_paymentvenue($venue) {            $idroles = $this->session->userdata('statususer');            $iduser = $this->session->userdata('idusers');            $this->db->join("schedules","registrations.idschedules = schedules.idschedules");            $this->db->join("branches","schedules.idbranches = branches.idbranches");            $this->db->join("exams","schedules.idexams = exams.idexams");            $this->db->join("users","registrations.idusers = users.idusers");            $this->db->where('registrations.registrationspayment','unpaid');            $this->db->where('schedules.idbranches',$venue);                if($idroles != 1) {                $this->db->where('registrations.createdbys',$iduser);                }            $query = $this->db->get("registrations");             return $query->num_rows();     }    public function filterbydate($venue,$limit,$offset) {        $idroles = $this->session->userdata('statususer');        $iduser = $this->session->userdata('idusers');        $this->db->join("schedules","registrations.idschedules = schedules.idschedules");        $this->db->join("branches","schedules.idbranches = branches.idbranches");        $this->db->join("exams","schedules.idexams = exams.idexams");        $this->db->join("users","registrations.idusers = users.idusers");        $this->db->where('registrations.registrationspayment','unpaid');         $this->db->where('schedules.schdate',$venue);        if($idroles != 1) {        $this->db->where('registrations.createdbys',$iduser);        }                $this->db->limit($limit, $offset);        $this->db->order_by('idregistrations', 'DESC');        $q =  $this->db->get("registrations");        return $q->result();        }    public function count_paymentdate($venue) {            $idroles = $this->session->userdata('statususer');            $iduser = $this->session->userdata('idusers');            $this->db->join("schedules","registrations.idschedules = schedules.idschedules");            $this->db->join("branches","schedules.idbranches = branches.idbranches");            $this->db->join("exams","schedules.idexams = exams.idexams");            $this->db->join("users","registrations.idusers = users.idusers");            $this->db->where('registrations.registrationspayment','unpaid');             $this->db->where('schedules.schdate',$venue);                if($idroles != 1) {                $this->db->where('registrations.createdbys',$iduser);                }            $query = $this->db->get("registrations");             return $query->num_rows();     }    public function confirmpayment() {          $idreg = $this->input->post('idreg');          $proof = $this->input->post('proof');          $data = array (              'paymentreceipt' => $proof,              'status' => 1,            );          $this->db->where('idregistrations', $idreg);          $q = $this->db->update('registrations', $data);    }    public function paid() {        $idreg = $this->uri->segment(3);        $data = array (                'registrationspayment' => 'PAID'            );        $this->db->where('idregistrations', $idreg);        $q = $this->db->update('registrations', $data);        $getUser = $this->db->query('select * from registrations where idregistrations="'.$idreg.'"');                foreach ($getUser->result() as $row) {            $getschedules = $this->db->query('select * from schedules where idschedules="'.$row->idschedules.'"');            // -- EMAIL CONFIRMATION -- //                        $config = Array(                           'protocol' => 'mail',                           'smtp_host' => 'mail.webdev.dlanet.com',                           'smtp_port' => 25,                           'smtp_user' => 'register@webdev.dlanet.com',                           'smtp_pass' => 'rahasia123',                           'mailtype'  => 'html',                           'charset'   => 'iso-8859-1',                           'wordwrap'  => TRUE                        );                $this->load->library('email', $config);                $this->email->from('register@webdev.dlanet.com', 'IELTS Indonesia');                 $this->email->to($this->showuser->getEmailuser($row->idusers));                $this->email->subject('IELTS INDONESIA Payment Completion');                                foreach ($getschedules->result() as $rew) {                $message = '                                            <div style="font-size: 18px; font-weight: bold; padding: 5px;height:68px;border-bottom:2px solid red;">                               <img src="'.base_url().'assets/pic/utclogo.png" style="float:left;width:40px;margin-right:15px;margin-top:7px;" />                               <img src="'.base_url().'assets/pic/bc-logo1.png" style="float:left;width:220px;margin-right:15px;margin-top:7px;" />                               <img src="'.base_url().'assets/pic/ielts-logo.png" style="float:left;margin-right:5px;margin-top:7px;" />                        </div>                        <div style="margin-top:7px;width:100%;padding:8px;background:#faedc1;color:#ed4b1a;-moz-border-radius:3px 3px 3px;-webkit-border-radius:3px 3px 3px;border-radius:3px 3px 3px;border:1px solid #f4c375;">                        <span style="color:#c0322f;font-weight:bold;">Congratulation.</span>&nbsp; Your payment has been successful and you are now eligible to join the  IELTS test at :                        </div>                                              <table style="margin-top:10px;">                        <tr>                        <td style="color:#626262">Test Date</td>                        <td style="color:#626262">:</td>                        <td style="color:#626262">'.$this->generated_tanggal->ubahtanggal($rew->schdate).'</td>                        </tr>                        <tr>                        <td style="color:#626262">Test Venue</td>                        <td style="color:#626262">:</td>                        <td style="color:#626262">'.$this->showuser->getvenue($rew->idbranches).'</td>                        </tr>                        <tr>                        <td style="color:#626262">Test Module</td>                        <td style="color:#626262">:</td>                        <td style="color:#626262">Akademik</td>                        </tr>                        <tr>                        <td style="color:#626262">Make Your Payment</td>                        <td style="color:#626262">:</td>                        <td style="color:#626262">IDR '.number_format($rew->rupiah,2,',','.').' / USD.'.$rew->dollar.' / GBP.'.$rew->gbp.'</td>                        </tr>                        </table>                        <div style="color:#626262;margin-top:7px;">We wish you all the best for your test. You will receive detailed testing arrangement a week prior to the testing date.</div>                                                <div style="color:#626262;margin-top:7px;">Thanks You,</div>                        <div style="color:#626262;text-decoration:none;">Ieltsindonesia.co.id</div>                        <div style="color:#626262;width:100%;height:20px;border-top:1px solid #ccc;padding-top:7px;margin-top:12px;">                        &copy;  2015  ieltsindonesia.co.id. All Rights Reserved                        </div>                ';            }                $this->email->message($message);                $this->email->send();            }    }    public function delpaymentunpaid() {        $getUnpaid = $this->db->query('select * from registrations where status="0"');        foreach ( $getUnpaid->result() as $row ) {            $this->db->query('update schedules set maxuser = maxuser+1 where idschedules="'.$row->idschedules.'" ');        }        $this->db->where('status', 0);        $this->db->delete('registrations');    }}?>